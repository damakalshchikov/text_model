"""MVP –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –¥–æ–º–∞"""

import streamlit as st
import pandas as pd
import numpy as np
import time
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import matplotlib.pyplot as plt
import seaborn as sns


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class Config:
    APP_TITLE = "Ìø† –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å —Ü–µ–Ω –Ω–∞ –¥–æ–º–∞ (MVP)"
    VERSION = "2.0.0"
    MODEL_PARAMS = {
        'n_estimators': 100,
        'random_state': 42,
        'max_depth': None,
        'n_jobs': -1
    }


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è MVP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title=Config.APP_TITLE,
        page_icon="Ìø†",
        layout="wide"
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title(Config.APP_TITLE)
    st.markdown(f"**–í–µ—Ä—Å–∏—è {Config.VERSION}** | –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ | Production-ready")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    @st.cache_data
    def load_data():
        california = fetch_california_housing()
        X = pd.DataFrame(california.data, columns=california.feature_names)
        y = california.target
        return X, y
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    @st.cache_resource
    def train_model(X, y):
        start_time = time.time()
        
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.3, random_state=42
        )
        
        model = RandomForestRegressor(**Config.MODEL_PARAMS)
        model.fit(X_train, y_train)
        
        y_pred = model.predict(X_test)
        
        metrics = {
            'mse': mean_squared_error(y_test, y_pred),
            'mae': mean_absolute_error(y_test, y_pred),
            'r2': r2_score(y_test, y_pred),
            'training_time': time.time() - start_time,
            'train_size': len(X_train),
            'test_size': len(X_test)
        }
        
        return model, metrics, X_test, y_test, y_pred
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ
    with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MVP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."):
        X, y = load_data()
        model, metrics, X_test, y_test, y_pred = train_model(X, y)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("Ì≥ä –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
    st.sidebar.metric("R¬≤", f"{metrics['r2']:.4f}")
    st.sidebar.metric("MSE", f"{metrics['mse']:.4f}")
    st.sidebar.metric("MAE", f"{metrics['mae']:.4f}")
    st.sidebar.metric("–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è", f"{metrics['training_time']:.2f}—Å")
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3 = st.tabs(["Ì¥Æ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "Ì≥ä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "ÌøóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"])
    
    with tab1:
        st.header("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –¥–æ–º–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            med_inc = st.slider("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ (10k$)", 0.5, 15.0, 5.0, 0.1)
            house_age = st.slider("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–º–∞ (–ª–µ—Ç)", 1.0, 50.0, 10.0, 1.0)
            ave_rooms = st.slider("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", 3.0, 15.0, 6.0, 0.1)
            ave_bedrms = st.slider("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω", 0.8, 5.0, 1.0, 0.01)
        
        with col2:
            population = st.slider("–ù–∞—Å–µ–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞", 3.0, 35000.0, 3000.0, 10.0)
            ave_occup = st.slider("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª—å—Ü–æ–≤", 0.8, 15.0, 3.0, 0.1)
            latitude = st.slider("–®–∏—Ä–æ—Ç–∞", 32.5, 42.0, 34.0, 0.01)
            longitude = st.slider("–î–æ–ª–≥–æ—Ç–∞", -125.0, -114.0, -119.0, 0.01)
        
        if st.button("Ì∫Ä –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É", type="primary"):
            try:
                features = pd.DataFrame({
                    "MedInc": [med_inc],
                    "HouseAge": [house_age],
                    "AveRooms": [ave_rooms],
                    "AveBedrms": [ave_bedrms],
                    "Population": [population],
                    "AveOccup": [ave_occup],
                    "Latitude": [latitude],
                    "Longitude": [longitude],
                })
                
                start_time = time.time()
                prediction = model.predict(features)[0]
                prediction_time = time.time() - start_time
                
                price_dollars = prediction * 100_000
                avg_price = y.mean() * 100_000
                price_diff = price_dollars - avg_price
                
                st.success(f"Ìø† **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${price_dollars:,.0f}**")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if price_diff > 0:
                        st.info(f"Ì≥à –ù–∞ **${abs(price_diff):,.0f}** –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
                    else:
                        st.info(f"Ì≥â –ù–∞ **${abs(price_diff):,.0f}** –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π")
                
                with col2:
                    percentage = (price_diff / avg_price) * 100
                    st.info(f"Ì≥ä **–†–∞–∑–Ω–∏—Ü–∞:** {percentage:+.1f}%")
                
                with col3:
                    st.info(f"‚ö° **–í—Ä–µ–º—è:** {prediction_time:.3f}—Å")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    with tab2:
        st.header("Ì≥ä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏")
        
        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        st.subheader("ÌæØ –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        importances = model.feature_importances_
        feature_names = X.columns
        
        fig, ax = plt.subplots(figsize=(10, 6))
        indices = np.argsort(importances)[::-1]
        
        bars = ax.bar(range(len(importances)), importances[indices])
        ax.set_xticks(range(len(importances)))
        ax.set_xticklabels([feature_names[i] for i in indices], rotation=45, ha='right')
        ax.set_ylabel('–í–∞–∂–Ω–æ—Å—Ç—å')
        ax.set_title('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –º–æ–¥–µ–ª–∏ Random Forest')
        
        colors = plt.cm.viridis(np.linspace(0, 1, len(bars)))
        for bar, color in zip(bars, colors):
            bar.set_color(color)
        
        plt.tight_layout()
        st.pyplot(fig)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏
        st.subheader("ÌæØ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.scatter(y_test * 100_000, y_pred * 100_000, alpha=0.5)
        ax.plot([y.min() * 100_000, y.max() * 100_000], 
                [y.min() * 100_000, y.max() * 100_000], 'r--', lw=2)
        ax.set_xlabel('–†–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã ($)')
        ax.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã ($)')
        ax.set_title('–†–µ–∞–ª—å–Ω—ã–µ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã')
        
        ax.text(0.05, 0.95, f'R¬≤ = {metrics["r2"]:.3f}', 
                transform=ax.transAxes, bbox=dict(boxstyle="round", facecolor='wheat'))
        
        plt.tight_layout()
        st.pyplot(fig)
    
    with tab3:
        st.header("ÌøóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã")
            st.markdown("""
            - **–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å** - —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            - **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ** - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
            - **–í–∞–ª–∏–¥–∞—Ü–∏—è** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            - **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫** - graceful error handling
            - **Responsive UI** - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            - **–ú–µ—Ç—Ä–∏–∫–∏** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            - **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è** - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            """)
        
        with col2:
            st.subheader("Ì≥à –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
            st.markdown(f"""
            **–ú–æ–¥–µ–ª—å:** Random Forest
            - –î–µ—Ä–µ–≤—å–µ–≤: {Config.MODEL_PARAMS['n_estimators']}
            - R¬≤: {metrics['r2']:.4f}
            - MSE: {metrics['mse']:.4f}
            - MAE: {metrics['mae']:.4f}
            
            **–î–∞–Ω–Ω—ã–µ:**
            - –û–±—Ä–∞–∑—Ü–æ–≤: {len(X):,}
            - –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(X.columns)}
            - –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {metrics['train_size']:,}
            - –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {metrics['test_size']:,}
            """)
        
        st.subheader("Ì∫Ä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        
        ready_col1, ready_col2, ready_col3 = st.columns(3)
        
        with ready_col1:
            st.markdown("""
            **Performance:**
            - ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            - ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            - ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            - ‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            """)
        
        with ready_col2:
            st.markdown("""
            **Reliability:**
            - ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            - ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            - ‚úÖ Graceful degradation
            - ‚úÖ Informative error messages
            """)
        
        with ready_col3:
            st.markdown("""
            **Maintainability:**
            - ‚úÖ –ß–∏—Å—Ç—ã–π –∫–æ–¥
            - ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            - ‚úÖ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
            - ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            """)
    
    # –ü–æ–¥–≤–∞–ª
    st.markdown("---")
    st.markdown(f"""
    Ì¥ñ **{Config.APP_TITLE}** | 
    –í–µ—Ä—Å–∏—è {Config.VERSION} | 
    R¬≤ = {metrics['r2']:.3f} | 
    –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É Ì∫Ä
    """)


if __name__ == "__main__":
    main()
