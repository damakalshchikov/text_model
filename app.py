import streamlit as st
import pandas as pd
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å —Ü–µ–Ω –Ω–∞ –¥–æ–º–∞", page_icon="üè†", layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üè† –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å —Ü–µ–Ω –Ω–∞ –¥–æ–º–∞")
st.markdown(
    "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
)


# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏
@st.cache_data
def load_data():
    california = fetch_california_housing()
    X = pd.DataFrame(california.data, columns=california.feature_names)
    y = california.target
    return X, y


@st.cache_resource
def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.3, random_state=42
    )
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # –ú–µ—Ç—Ä–∏–∫–∏
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    return model, mse, r2, X_test, y_test, y_pred


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å..."):
    X, y = load_data()
    model, mse, r2, X_test, y_test, y_pred = train_model(X, y)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏
st.sidebar.header("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
st.sidebar.metric("–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ (MSE)", f"{mse:.4f}")
st.sidebar.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ R¬≤", f"{r2:.4f}")

# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
feature_descriptions = {
    "MedInc": "–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ —Ä–∞–π–æ–Ω–µ",
    "HouseAge": "–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–º–æ–≤ –≤ —Ä–∞–π–æ–Ω–µ",
    "AveRooms": "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –Ω–∞ –¥–æ–º",
    "AveBedrms": "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω –Ω–∞ –¥–æ–º",
    "Population": "–ù–∞—Å–µ–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞",
    "AveOccup": "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö –Ω–∞ –¥–æ–º",
    "Latitude": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞ —Ä–∞–π–æ–Ω–∞",
    "Longitude": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞ —Ä–∞–π–æ–Ω–∞",
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
tab1, tab2, tab3 = st.tabs(
    ["üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "üìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏"]
)

with tab1:
    st.header("–í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–º–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã")

    col1, col2 = st.columns(2)

    with col1:
        med_inc = st.slider(
            "–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ —Ä–∞–π–æ–Ω–µ",
            min_value=float(X["MedInc"].min()),
            max_value=float(X["MedInc"].max()),
            value=float(X["MedInc"].mean()),
            step=0.1,
        )

        house_age = st.slider(
            "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–º–∞",
            min_value=float(X["HouseAge"].min()),
            max_value=float(X["HouseAge"].max()),
            value=float(X["HouseAge"].mean()),
            step=1.0,
        )

        ave_rooms = st.slider(
            "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
            min_value=float(X["AveRooms"].min()),
            max_value=float(X["AveRooms"].max()),
            value=float(X["AveRooms"].mean()),
            step=0.1,
        )

        ave_bedrms = st.slider(
            "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω",
            min_value=float(X["AveBedrms"].min()),
            max_value=float(X["AveBedrms"].max()),
            value=float(X["AveBedrms"].mean()),
            step=0.01,
        )

    with col2:
        population = st.slider(
            "–ù–∞—Å–µ–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞",
            min_value=float(X["Population"].min()),
            max_value=float(X["Population"].max()),
            value=float(X["Population"].mean()),
            step=10.0,
        )

        ave_occup = st.slider(
            "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö",
            min_value=float(X["AveOccup"].min()),
            max_value=float(X["AveOccup"].max()),
            value=float(X["AveOccup"].mean()),
            step=0.1,
        )

        latitude = st.slider(
            "–®–∏—Ä–æ—Ç–∞",
            min_value=float(X["Latitude"].min()),
            max_value=float(X["Latitude"].max()),
            value=float(X["Latitude"].mean()),
            step=0.01,
        )

        longitude = st.slider(
            "–î–æ–ª–≥–æ—Ç–∞",
            min_value=float(X["Longitude"].min()),
            max_value=float(X["Longitude"].max()),
            value=float(X["Longitude"].mean()),
            step=0.01,
        )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if st.button("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É", type="primary"):
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        input_data = pd.DataFrame(
            {
                "MedInc": [med_inc],
                "HouseAge": [house_age],
                "AveRooms": [ave_rooms],
                "AveBedrms": [ave_bedrms],
                "Population": [population],
                "AveOccup": [ave_occup],
                "Latitude": [latitude],
                "Longitude": [longitude],
            }
        )

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = model.predict(input_data)[0]
        price_dollars = prediction * 100_000

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.success(f"üè† **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–º–∞: ${price_dollars:,.2f}**")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        avg_price = y.mean() * 100_000
        price_diff = price_dollars - avg_price

        if price_diff > 0:
            st.info(
                f"üìà –≠—Ç–∞ —Ü–µ–Ω–∞ –Ω–∞ {price_diff:,.0f} –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã {avg_price:,.0f}"
            )
        else:
            st.info(
                f"üìâ –≠—Ç–∞ —Ü–µ–Ω–∞ –Ω–∞ {abs(price_diff):,.0f} –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã {avg_price:,.0f}"
            )

with tab2:
    st.header("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.dataframe(X.describe())

    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å —Ü–µ–Ω–æ–π")
    fig, ax = plt.subplots(figsize=(10, 8))
    y_series = pd.Series(y, index=X.index, name="Target")
    correlations = X.corrwith(y_series).sort_values(ascending=False)
    sns.barplot(x=correlations.values, y=correlations.index, ax=ax)
    ax.set_xlabel("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ü–µ–Ω–æ–π")
    ax.set_title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å —Ü–µ–Ω–æ–π –¥–æ–º–∞")
    st.pyplot(fig)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω")
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.hist(y * 100_000, bins=50, alpha=0.7, color="skyblue")
    ax.set_xlabel("–¶–µ–Ω–∞ –¥–æ–º–∞ ($)")
    ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤")
    ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –¥–æ–º–∞")
    st.pyplot(fig)

with tab3:
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏")

    # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∞–ª—å–Ω—ã–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ
    st.subheader("–†–µ–∞–ª—å–Ω—ã–µ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã")
    fig, ax = plt.subplots(figsize=(10, 8))
    ax.scatter(y_test * 100_000, y_pred * 100_000, alpha=0.5)
    ax.plot(
        [y.min() * 100_000, y.max() * 100_000],
        [y.min() * 100_000, y.max() * 100_000],
        "r--",
    )
    ax.set_xlabel("–†–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã ($)")
    ax.set_ylabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã ($)")
    ax.set_title("–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏")
    st.pyplot(fig)

    # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    feature_importance = pd.DataFrame(
        {"feature": X.columns, "importance": model.feature_importances_}
    ).sort_values("importance", ascending=False)

    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(data=feature_importance, x="importance", y="feature", ax=ax)
    ax.set_xlabel("–í–∞–∂–Ω–æ—Å—Ç—å")
    ax.set_title("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –º–æ–¥–µ–ª–∏")
    st.pyplot(fig)

# –ü–æ–¥–≤–∞–ª
st.markdown("---")
st.markdown("ü§ñ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit –∏ scikit-learn")
