"""–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""

import streamlit as st
import time
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title="üè† –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å —Ü–µ–Ω –Ω–∞ –¥–æ–º–∞", page_icon="üè†", layout="wide"
    )

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üè† –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å —Ü–µ–Ω –Ω–∞ –¥–æ–º–∞ (MVP)")
    st.markdown(
        "**–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** - –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
    )

    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    @st.cache_data
    def load_data():
        california = fetch_california_housing()
        X = pd.DataFrame(california.data, columns=california.feature_names)
        y = california.target
        return X, y

    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    @st.cache_resource
    def train_model(X, y):
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.3, random_state=42
        )
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)

        y_pred = model.predict(X_test)
        mse = mean_squared_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)

        return model, mse, r2, X_test, y_test, y_pred

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."):
        X, y = load_data()
        model, mse, r2, X_test, y_test, y_pred = train_model(X, y)

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
    st.sidebar.metric("MSE", f"{mse:.4f}")
    st.sidebar.metric("R¬≤", f"{r2:.4f}")

    st.sidebar.subheader("üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    st.sidebar.text("‚úÖ –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
    st.sidebar.text("‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏")
    st.sidebar.text("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    st.sidebar.text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    st.sidebar.text("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2 = st.tabs(["üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "üìä MVP –§—É–Ω–∫—Ü–∏–∏"])

    with tab1:
        st.header("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –¥–æ–º–∞")

        col1, col2 = st.columns(2)

        with col1:
            med_inc = st.slider("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥", 0.5, 15.0, 5.0, 0.1)
            house_age = st.slider("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–º–∞", 1.0, 50.0, 10.0, 1.0)
            ave_rooms = st.slider("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", 3.0, 15.0, 6.0, 0.1)
            ave_bedrms = st.slider("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω", 0.8, 5.0, 1.0, 0.01)

        with col2:
            population = st.slider("–ù–∞—Å–µ–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞", 3.0, 35000.0, 3000.0, 10.0)
            ave_occup = st.slider("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö", 0.8, 15.0, 3.0, 0.1)
            latitude = st.slider("–®–∏—Ä–æ—Ç–∞", 32.5, 42.0, 34.0, 0.01)
            longitude = st.slider("–î–æ–ª–≥–æ—Ç–∞", -125.0, -114.0, -119.0, 0.01)

        if st.button("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É", type="primary"):
            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                features = pd.DataFrame(
                    {
                        "MedInc": [med_inc],
                        "HouseAge": [house_age],
                        "AveRooms": [ave_rooms],
                        "AveBedrms": [ave_bedrms],
                        "Population": [population],
                        "AveOccup": [ave_occup],
                        "Latitude": [latitude],
                        "Longitude": [longitude],
                    }
                )

                start_time = time.time()
                prediction = model.predict(features)[0]
                prediction_time = time.time() - start_time

                price_dollars = prediction * 100_000
                avg_price = y.mean() * 100_000
                price_diff = price_dollars - avg_price

                # –†–µ–∑—É–ª—å—Ç–∞—Ç
                st.success(f"üè† **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${price_dollars:,.0f}**")

                if price_diff > 0:
                    st.info(
                        f"üìà –ù–∞ **${abs(price_diff):,.0f}** –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã (${avg_price:,.0f})"
                    )
                else:
                    st.info(
                        f"üìâ –ù–∞ **${abs(price_diff):,.0f}** –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã (${avg_price:,.0f})"
                    )

                st.info(f"‚ö° –í—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {prediction_time:.3f} —Å–µ–∫—É–Ω–¥")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {str(e)}")

    with tab2:
        st.header("üöÄ MVP –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
            st.markdown(
                """
            - **–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** - –∫–æ–¥ —Ä–∞–∑–±–∏—Ç –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
            - **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ** - –±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏
            - **–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            - **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫** - graceful error handling
            - **–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            - **–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI** - –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            - **Responsive –¥–∏–∑–∞–π–Ω** - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞
            """
            )

        with col2:
            st.subheader("üîÑ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            st.markdown(
                """
            - **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ** - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Ä–∞–±–æ—Ç—ã
            - **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏** - –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
            - **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞** - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            - **–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤** - CSV/JSON –≤—ã–≥—Ä—É–∑–∫–∞
            - **A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
            - **API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** - REST API endpoints
            - **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** - –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            """
            )

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

        data_info = {
            "–í—Å–µ–≥–æ –æ–±—Ä–∞–∑—Ü–æ–≤": f"{len(X):,}",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤": len(X.columns),
            "–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω": f"${y.min()*100_000:,.0f} - ${y.max()*100_000:,.0f}",
            "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞": f"${y.mean()*100_000:,.0f}",
            "–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞": f"${pd.Series(y).median()*100_000:,.0f}",
        }

        cols = st.columns(len(data_info))
        for i, (key, value) in enumerate(data_info.items()):
            cols[i].metric(key, value)

    # –ü–æ–¥–≤–∞–ª
    st.markdown("---")
    st.markdown("ü§ñ **MVP –≤–µ—Ä—Å–∏—è** | –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ | –ì–æ—Ç–æ–≤–æ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é")


if __name__ == "__main__":
    main()
